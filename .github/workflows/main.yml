name: Train BitcoinHomeBroker LLM Model

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Prepare folders
        run: mkdir -p outputs/model

      # === DOWNLOAD do modelo anterior ===
      - name: Download previous model artifact (latest)
        uses: actions/download-artifact@v4
        with:
          name: llm-model-BitcoinHomeBroker-latest
          path: outputs/model
        continue-on-error: true

      - name: Download previous model artifact (legacy fallback)
        if: ${{ failure() || cancelled() }}
        uses: actions/download-artifact@v4
        with:
          name: llm-model-BitcoinHomeBroker
          path: outputs/model
        continue-on-error: true

      # === Normalização do modelo anterior ===
      - name: Normalize preexisting model (warm-start & archive prev)
        shell: bash
        run: |
          set -e
          echo "Normalizando modelo pré-existente..."
          mkdir -p outputs/model

          # Seleciona o .pth mais recente baixado (se houver)
          PREV_SRC=$(ls -t outputs/model/*.pth 2>/dev/null | head -n 1 || true)
          if [ -z "$PREV_SRC" ]; then
            echo "Nenhum modelo anterior encontrado."
          else
            echo "Modelo anterior encontrado: $PREV_SRC"
            # Mantém uma cópia imutável como 'prev'
            cp -f "$PREV_SRC" outputs/model/bitcoinhomebroker_prev.pth

            # Prepara o nome que o seu script espera carregar
            # (compat + alias latest)
            if [ "$(realpath "$PREV_SRC")" != "$(realpath -m outputs/model/bitcoinhomebroker.pth)" ]; then
              cp -f "$PREV_SRC" outputs/model/bitcoinhomebroker.pth
            fi
            if [ "$(realpath "$PREV_SRC")" != "$(realpath -m outputs/model/bitcoinhomebroker_latest.pth)" ]; then
              cp -f "$PREV_SRC" outputs/model/bitcoinhomebroker_latest.pth
            fi

            # Hash do arquivo usado para warm-start (para comparação pós-treino)
            sha256sum outputs/model/bitcoinhomebroker.pth | tee outputs/model/.pre_hash.txt
          fi

          echo "Conteúdo atual:"
          ls -lah outputs/model || true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Marcador de tempo para identificar arquivos gerados/alterados neste run
      - name: Create training timestamp marker
        run: date -u +"%Y-%m-%dT%H:%M:%SZ" | tee outputs/model/.train_start.txt

      - name: Run training script
        run: python ml_advanced_integrated_FIXED.py

      # === Coleta apenas modelos criados/alterados DEPOIS do marcador ===
      - name: Collect updated models (post-training)
        shell: bash
        run: |
          set -e
          echo "Coletando modelos atualizados..."
          MARKER_TIME=$(stat -c %Y outputs/model/.train_start.txt)
          UPDATED=$(find outputs/model -type f -name "*.pth" -newer outputs/model/.train_start.txt | tr '\n' ' ' || true)

          echo "Arquivos .pth atualizados após o treino:"
          echo "${UPDATED:-<nenhum>}"

          # Se o script salvou fora de outputs/model, mova-os para dentro
          OUTSIDE=$(find . -maxdepth 3 -type f -name "*.pth" ! -path "./outputs/model/*" || true)
          if [ -n "$OUTSIDE" ]; then
            echo "Movendo .pth gerados fora de outputs/model para outputs/model:"
            echo "$OUTSIDE"
            for f in $OUTSIDE; do
              mv -f "$f" outputs/model/
            done
          fi

          # Recalcula UPDATED após possíveis moves
          UPDATED=$(find outputs/model -type f -name "*.pth" -newer outputs/model/.train_start.txt | tr '\n' ' ' || true)

          if [ -z "$UPDATED" ]; then
            echo "ATENÇÃO: Nenhum .pth foi modificado/gerado após o treino."
            # Ainda assim, seguimos e veremos se o hash mudou.
          fi

          echo "Listagem final em outputs/model:"
          ls -lah outputs/model || true

      # === Compara hash pré x pós e versiona ===
      - name: Version & upload-ready (latest + timestamp)
        shell: bash
        run: |
          set -e
          echo "Versionando modelos..."
          mkdir -p outputs/model

          # Define o candidato 'novo' como o .pth mais recente no diretório
          CAND=$(ls -t outputs/model/*.pth 2>/dev/null | head -n 1 || true)
          if [ -z "$CAND" ]; then
            echo "ERRO: Nenhum arquivo .pth presente para versionamento."
            exit 1
          fi
          echo "Candidato a modelo atualizado: $CAND"

          # Hash pré-treino (se existia)
          PRE_HASH_FILE="outputs/model/.pre_hash.txt"
          if [ -f "$PRE_HASH_FILE" ]; then
            PRE_HASH=$(cut -d ' ' -f1 "$PRE_HASH_FILE")
            echo "PRE_HASH: $PRE_HASH"
          else
            PRE_HASH=""
            echo "Sem PRE_HASH (primeiro treino ou sem modelo anterior)."
          fi

          # Hash do candidato pós-treino
          NEW_HASH=$(sha256sum "$CAND" | cut -d ' ' -f1)
          echo "NEW_HASH: $NEW_HASH"

          # Decide se houve atualização real
          UPDATED="yes"
          if [ -n "$PRE_HASH" ] && [ "$PRE_HASH" = "$NEW_HASH" ]; then
            UPDATED="no"
            echo "AVISO: Hash igual ao anterior — o arquivo não mudou."
          fi

          # Sempre publicar 'latest' e 'timestamp', mas registrar se não mudou
          LATEST_FIXED="outputs/model/bitcoinhomebroker_latest.pth"
          cp -f "$CAND" "$LATEST_FIXED"

          TS=$(date +%Y%m%d_%H%M%S)
          ARCHIVE="outputs/model/bitcoinhomebroker_${TS}.pth"
          cp -f "$CAND" "$ARCHIVE"

          if [ "$UPDATED" = "no" ]; then
            echo "Nenhuma diferença detectada entre o pré e o pós (pode indicar que o script não salvou novo estado ou convergiu sem atualizar)."
          else
            echo "Modelo atualizado detectado e versionado."
          fi

          echo "Arquivos finais:"
          ls -lah outputs/model || true

      - name: Upload artifact (latest)
        uses: actions/upload-artifact@v4
        with:
          name: llm-model-BitcoinHomeBroker-latest
          path: outputs/model/bitcoinhomebroker_latest.pth
          if-no-files-found: error
          retention-days: 30

      - name: Upload artifact (archive)
        uses: actions/upload-artifact@v4
        with:
          name: llm-model-BitcoinHomeBroker-archive-${{ github.run_number }}
          path: outputs/model/bitcoinhomebroker_*.pth
          if-no-files-found: error
          retention-days: 90
